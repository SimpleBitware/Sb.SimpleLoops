name: Build
on:
  workflow_dispatch:       # Allow running the workflow manually from the GitHub UI
  push:
    branches: [ 'main' ]   # Run the workflow when pushing to the main branch
  pull_request:
    branches: [ '*' ]      # Run the workflow for all pull requests
  release:
    types: [ published ]   # Run the workflow when a new GitHub release is published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  create_nuget:
    name: create nuget package
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
        filter: tree:0

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Create package
      run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
    # Publish only when creating a GitHub Release
    # You can update this logic if you want to manage releases differently
    # github.ref == 'refs/heads/main'
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          cd ${{ env.NuGetDirectory }}
          dotnet nuget push "*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
